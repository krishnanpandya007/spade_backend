"""
Django settings for spade_ubuntu project.

Generated by 'django-admin startproject' using Django 2.2.20.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

from datetime import timedelta
import os
import mimetypes

from django.core.management.utils import get_random_secret_key

mimetypes.add_type("text/css", ".css", True)
# mimetypes.add_type("application/json", ".json", True)



# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("DJANGO_SECRET_KEY", get_random_secret_key())
ALLOWED_HOSTS = os.getenv("DJANGO_ALLOWED_HOSTS", "127.0.0.1, localhost").split(",")

# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = True
DEBUG = os.getenv("DEBUG", "False") == "True"

# ALLOWED_HOSTS = ['localhost', '127.0.0.1']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    # Added manually
    # 'spado.apps.mainconfig',
    'api',
    'spado_ubuntu',
    'rest_framework',
    'ckeditor',
    'corsheaders',
    'taggit',


    #for social logins --> allauth
    # 'allauth',
    # 'allauth.account',
    # 'allauth.socialaccount',

    #Providers for social login
    # 'allauth.socialaccount.providers.facebook',
    # 'allauth.socialaccount.providers.google',
]


MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsPostCsrfMiddleware',
]

ROOT_URLCONF = 'spade_ubuntu.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'spade_frontend/build')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'spade_ubuntu.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        # 'NAME': os.getenv('go_server_name'),
        'NAME': 'spade_db',

        # 'USER': os.getenv('go_server_user'),
        'USER': 'krishnanpandya',

        # 'PASSWORD': os.getenv('go_server_pass') + "HASH8172",
        'PASSWORD': 'rBtdjxqa9ZS6yzgt',
        # 'HOST': os.getenv('go_server_host'),
        'HOST': 'spade-db-do-user-10987256-0.b.db.ondigitalocean.com',

        # 'PORT': os.getenv('go_server_port')
        'PORT': '25060'

    }
}


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]



REST_FRAMEWORK = {

     'DEFAULT_AUTHENTICATION_CLASSES': (
         'rest_framework_simplejwt.authentication.JWTAuthentication',
     )
 }


SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(hours=1), # Every 1 hours access token is expired
    'REFRESH_TOKEN_LIFETIME': timedelta(days=30), # Every 30 days user needs to re-login
    'ROTATE_REFRESH_TOKENS':False,
    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
}


# CORS_ORIGIN_ALLOW_ALL = True

# CORS_ALLOWED_ORIGINS_REGEXES = [
#     r"^http://\w+\.127.0.0.1:2000\.com$",
# ]

# we whitelist localhost:3000 because that's where frontend will be serve
# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'

STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# LOGIN_URL = "http://localhost:3000/"

MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'

#Commited Changes
STATICFILES_DIRS = (
    os.path.join(BASE_DIR, 'static'),
    
)

# mimetypes.add_type("text/html", ".html", True)

# REST_FRAMEWORK = {
# 'DEFAULT_PERMISSION_CLASSES': (
#     'rest_framework.permissions.IsAuthenticated',
  
# ),
# 'DEFAULT_AUTHENTICATION_CALSSES': (
#     'rest_framework_jwt.authentication.JSONWebTokenAuthentication',
# )
# }
# LOGIN_URL = '/abc/login/'
# Related to DB
DEFAULT_AUTO_FIELD='django.db.models.AutoField'

SITE_ID = 1